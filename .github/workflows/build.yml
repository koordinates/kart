---
name: Build

on: [push, pull_request]

env:
  PY_VER: "3.10"
  CMAKE_VERSION: "3.25.0"
  FORCE_COLOR: "YES"

jobs:
  #
  # Linux via CMake+VCPKG
  #
  Linux:
    strategy:
      matrix:
        os: [ubuntu-22.04, buildjet-2vcpu-ubuntu-2204-arm]
    runs-on: ${{ matrix.os }}

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only macos]'))
      )

    env:
      CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
      CCACHE_COMPRESS: "1"
      KART_POSTGRES_URL: "postgresql://postgres:@localhost:5432/postgres"
      KART_SQLSERVER_URL: "mssql://sa:PassWord1@localhost:1433/master"
      KART_MYSQL_URL: "mysql://root:PassWord1@localhost:3306"

    services:
      postgis:
        # https://github.com/postgis/docker-postgis/issues/216
        image: ghcr.io/baosystems/postgis
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 2s
          --health-retries 5
          -e POSTGRES_HOST_AUTH_METHOD=trust
        ports:
          - 5432:5432
      sqlserver:
        image: mcr.microsoft.com/mssql/server
        options: >-
          -e ACCEPT_EULA=Y
          -e SA_PASSWORD=PassWord1
        ports:
          - 1433:1433
      mysql:
        image: mysql
        credentials:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        options: >-
          -e MYSQL_ROOT_PASSWORD=PassWord1
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      #
      # setup
      #

      - name: "setup: python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PY_VER }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'

      - name: "setup: cmake & ninja"
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: "${{ env.CMAKE_VERSION }}"

      - name: "setup: ccache"
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: vendor-ccache-${{ matrix.os }}-cmake-vcpkg

      - name: "setup: misc"
        run: |
          sudo apt-get install -q -y --no-install-recommends ccache
          mkdir -p ${{ env.CCACHE_DIR }}
          echo "/usr/lib/ccache" >> $GITHUB_PATH

      - name: "setup: vcpkg"
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg-vendor/vcpkg"
          vcpkgJsonGlob: "**/vcpkg-vendor/vcpkg.json"
          prependedCacheKey: "20221110a-${{ matrix.os }}"
          appendedCacheKey: "C${{ env.CMAKE_VERSION}}:${{ hashFiles('vcpkg-vendor/vcpkg-overlay-triplets/**', 'vcpkg-vendor/vcpkg-overlay-ports/**', 'vcpkg-vendor/vcpkg-toolchain-setup.cmake') }}"

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]] && [[ '${{ github.ref_name }}' =~ ^v(.*) ]]; then
            VER="${{ github.ref_name }}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "value=$VER" >> $GITHUB_OUTPUT
          echo "KART_VERSION=$VER" >> $GITHUB_ENV
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: "app: vendor dependencies"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux

      - name: "check for vcpkg errors"
        if: ${{ failure() || cancelled() }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV

      - name: "app: build"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          buildPreset: ci-linux

      - name: "vendor: save archive"
        uses: actions/upload-artifact@v3
        with:
          name: vendor-linux-${{ runner.arch }}-py${{ env.PY_VER }}
          path: build/vcpkg-vendor/kart-vendor.*.tar.gz

      #
      # App tests & checks
      #

      - name: "test: smoke test"
        run: |
          ./build/kart --version

      - name: "test: install database drivers for tests"
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null
          sudo apt-get update -q -y
          sudo ACCEPT_EULA=Y apt-get install -q -y msodbcsql17

      - name: "test: unit tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          testPreset: ci-linux

      - name: "test: dependency license check"
        run: |
          cmake --build build --target py-license-check

      #
      # Packaging
      #

      - name: "bundle: assemble"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          buildPreset: ci-bundle-linux

      - name: "bundle: smoke test"
        shell: bash
        run: |
          ./build/pyinstaller/dist/kart/kart --version

      - name: "bundle: e2e tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          testPreset: ci-e2e-linux

      - name: "package: ZIP"
        shell: bash
        run: |
          cpack --preset=ci-linux

      - name: "package: save"
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ runner.arch }}-bundle
          path: build/dist/kart-*.tar.gz

  #
  # macOS via CMake+VCPKG
  #
  macOS:
    strategy:
      matrix:
        os: [macos-12]
    runs-on: ${{ matrix.os }}

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only linux]'))
      )

    env:
      CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
      CCACHE_COMPRESS: "1"
      HOMEBREW_CACHE: ${{ github.workspace }}/.cache/brew
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
      MACOS_CODESIGN_ID: ${{ secrets.MACOS_CODESIGN_ID }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      #
      # setup
      #

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: "setup: python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PY_VER }}
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'

      - name: "setup: homebrew cache"
        id: cache-brew
        uses: actions/cache@v3
        with:
          path: .cache/brew
          key: brew-cmake-${{ matrix.os }}-vcpkg

      - name: "setup: cmake & ninja"
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: "${{ env.CMAKE_VERSION }}"

      - name: "setup: ccache"
        uses: actions/cache@v3
        if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
        with:
          path: ${{ env.CCACHE_DIR }}
          key: vendor-ccache-${{ matrix.os }}-vcpkg

      - name: "setup: misc"
        run: |
          brew install -q autoconf automake ccache
          mkdir -p ${{ env.CCACHE_DIR }}
          echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH

      - name: "setup: vcpkg"
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg-vendor/vcpkg"
          vcpkgJsonGlob: "**/vcpkg-vendor/vcpkg.json"
          prependedCacheKey: "20221110a"
          appendedCacheKey: "C${{ env.CMAKE_VERSION}}:${{ hashFiles('vcpkg-vendor/vcpkg-overlay-triplets/**', 'vcpkg-vendor/vcpkg-overlay-ports/**', 'vcpkg-vendor/vcpkg-toolchain-setup.cmake') }}"

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]] && [[ '${{ github.ref_name }}' =~ ^v(.*) ]]; then
            VER="${{ github.ref_name }}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "value=$VER" >> $GITHUB_OUTPUT
          echo "KART_VERSION=$VER" >> $GITHUB_ENV
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: "app: vendor dependencies"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos

      - name: "check for vcpkg errors"
        if: ${{ failure() || cancelled() }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV

      - name: "app: build"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          buildPreset: ci-macos

      - name: "vendor: save archive"
        uses: actions/upload-artifact@v3
        with:
          name: vendor-macos-${{ runner.arch }}-py${{ env.PY_VER }}
          path: build/vcpkg-vendor/kart-vendor.*.tar.gz

      #
      # App tests & checks
      #

      - name: "test: smoke test"
        run: |
          ./build/kart --version

      - name: "test: unit tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          testPreset: ci-macos

      #
      # Packaging
      #

      - name: "bundle: setup app signing certificate"
        id: keychain
        uses: apple-actions/import-codesign-certs@v1
        if: "${{ env.MACOS_CODESIGN_ID != '' }}"
        with:
          p12-file-base64: ${{ secrets.MACOS_APP_CERT }}
          p12-password: ${{ secrets.MACOS_CERT_PW }}

      - name: "bundle: assemble"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          buildPreset: ci-bundle-macos

      - name: "bundle: smoke test"
        shell: bash
        run: |
          ./build/pyinstaller/dist/Kart.app/Contents/MacOS/kart --version

      - name: "bundle: e2e tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          testPreset: ci-e2e-macos

      - name: "package: ZIP"
        shell: bash
        run: |
          cpack --preset=ci-macos

      - name: "package: save"
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ runner.arch }}-bundle
          path: build/dist/kart-*.zip

  #
  # Windows via CMake+VCPKG
  #
  Windows:
    strategy:
      matrix:
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    env:
      NINJA_VERSION: "1.10.2"  # workaround for python logging output buffering noise
      SIGN_AZURE_CERTIFICATE: ${{ secrets.WIN_SIGN_AZURE_CERTIFICATE }}

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Windows builds with eg: `[ci only linux]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !(contains(github.event.head_commit.message, '[ci only linux]') || contains(github.event.head_commit.message, '[ci only macos]'))
      )
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Setup

      - name: "msvc setup"
        uses: ilammy/msvc-dev-cmd@v1

      - name: "setup: cmake"
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: "${{ env.CMAKE_VERSION }}"
          ninjaVersion: "${{ env.NINJA_VERSION }}"

      - name: "setup: python"
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PY_VER }}"
          architecture: x64
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'

      - name: "setup: vcpkg"
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg-vendor/vcpkg"
          vcpkgJsonGlob: "**/vcpkg-vendor/vcpkg.json"
          prependedCacheKey: "20221201a"
          appendedCacheKey: "C${{ env.CMAKE_VERSION}}:N${{ env.NINJA_VERSION }}:${{ hashFiles('vcpkg-vendor/vcpkg-overlay-triplets/**', 'vcpkg-vendor/vcpkg-overlay-ports/**', 'vcpkg-vendor/vcpkg-toolchain-setup.cmake') }}"

      - name: "setup: misc"
        shell: pwsh
        run: |
          & dotnet tool install --global AzureSignTool --version 3.0.0

      #
      # App Build
      #

      - name: "app: version"
        id: version
        shell: bash
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]] && [[ '${{ github.ref_name }}' =~ ^v(.*) ]]; then
            VER="${{ github.ref_name }}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "value=$VER" >> $GITHUB_OUTPUT
          echo "KART_VERSION=$VER" >> $GITHUB_ENV
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: "app: vendor dependencies"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows

      - name: "check for vcpkg errors"
        if: ${{ failure() || cancelled() }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV

      - name: "app: build"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows
          buildPreset: ci-windows

      - name: "vendor: save archive"
        uses: actions/upload-artifact@v3
        with:
          name: vendor-windows-${{ runner.arch }}-py${{ env.PY_VER }}
          path: build/vcpkg-vendor/kart-vendor.*.zip

      #
      # App tests & checks
      #

      - name: "test: smoke test"
        shell: bash
        run: |
          ./build/kart.cmd --version

      - name: "test: unit tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows
          testPreset: ci-windows

      #
      # Packaging
      #

      - name: "bundle: assemble"
        uses: lukka/run-cmake@v10
        env:
          SIGN_AZURE_VAULT: ${{ secrets.WIN_SIGN_AZURE_VAULT }}
          SIGN_AZURE_CLIENTID: ${{ secrets.WIN_SIGN_AZURE_CLIENTID }}
          SIGN_AZURE_CLIENTSECRET: ${{ secrets.WIN_SIGN_AZURE_CLIENTSECRET }}
          SIGN_AZURE_TENANTID: ${{ secrets.WIN_SIGN_AZURE_TENANTID }}
        with:
          configurePreset: ci-windows
          buildPreset: ci-bundle-windows

      - name: "bundle: smoke test"
        shell: bash
        run: |
          ./build/pyinstaller/dist/kart/kart.exe --version

      - name: "bundle: e2e tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows
          testPreset: ci-e2e-windows

      - name: "package: ZIP"
        shell: bash
        run: |
          cpack --preset=ci-windows

      - name: "package: save"
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ runner.arch }}-bundle
          path: build/dist/kart-*.zip
