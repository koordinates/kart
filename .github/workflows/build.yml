---
name: Build

on: [push, pull_request]

env:
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip

jobs:
  posix:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux
            id: Linux
            os: ubuntu-latest
            package-formats: deb rpm
            services:
              postgis:
                image: kartoza/postgis
                options: >-
                  --health-cmd pg_isready
                  --health-interval 2s
                  --health-timeout 2s
                  --health-retries 5
                ports:
                  - 5432:5432
          - name: macOS
            id: Darwin
            os: macos-latest
            package-formats: pkg
            services: {}
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Linux/macOS builds with `[ci only windows]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !contains(github.event.head_commit.message, '[ci only windows]')
      )

    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: "1"
      HOMEBREW_CACHE: ${{ github.workspace }}/.cache/brew
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
    services: ${{ matrix.platform.services }}
    steps:
      - uses: actions/checkout@v2

      #
      # vendor source
      #

      - name: "vendor-source: cache"
        id: cache-vendor
        uses: actions/cache@v1
        with:
          path: .cache/vendor-source
          key: vendor-source-${{ matrix.platform.id }}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/Makefile') }}

      - name: "vendor-source: download"
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: |
          tar xvf .cache/vendor-source/vendor.tar || true
          echo 'verbose = off' >> $HOME/.wgetrc
          make -C vendor sources
          mkdir -p .cache/vendor-source
          tar cvf .cache/vendor-source/vendor.tar vendor/*/*.tar.* vendor/*/*.zip

      - name: "python: pip cache"
        uses: actions/cache@v1
        with:
          path: .cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('Makefile') }}
          restore-keys: |
            pip-${{ runner.os }}-

      #
      # vendor build
      #

      # get last time's vendor bundle
      # a hit here leads to skipping the rest of this job

      - name: "vendor-dist: cache"
        id: cache-dist
        uses: actions/cache@v1
        with:
          path: vendor/dist/
          key: vendor-dist-${{ matrix.platform.id}}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}

      - name: "üêß python"
        uses: actions/setup-python@v1
        if: runner.os != 'macOS'
        with:
          python-version: '3.7'

      - name: "üçé homebrew cache"
        id: cache-brew
        uses: actions/cache@v1
        if: runner.os == 'macOS'
        with:
          path: .cache/brew
          key: brew

      - name: "üçé prerequisites"
        if: runner.os == 'macOS'
        run: |
          brew uninstall --force php
          brew update-reset
          brew install --force python@3.7 ccache pkg-config sqlite3 pandoc
          # python@3.7 is keg-only and won't link automatically - link manually like so:
          echo "/usr/local/opt/python@3.7/bin:$PATH" >> $GITHUB_PATH
          brew install --force --cask Packages

      - name: "vendor: ccache"
        uses: actions/cache@v1
        if: steps.cache-dist.outputs.cache-hit != 'true'
        with:
          path: .ccache
          key: vendor-ccache-${{ matrix.platform.id}}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}-${{ github.sha }}
          restore-keys: |
            vendor-ccache-${{ matrix.platform.id }}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}-${{ github.sha }}
            vendor-ccache-${{ matrix.platform.id }}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}-
            vendor-ccache-${{ matrix.platform.id }}-

      - name: "vendor: build"
        if: steps.cache-dist.outputs.cache-hit != 'true'
        run: |
          tar xvf .cache/vendor-source/vendor.tar
          echo 'verbose = off' >> $HOME/.wgetrc
          make -C vendor build-${{ matrix.platform.id }}

      - name: "vendor: save library bundle"
        uses: actions/upload-artifact@v2-preview
        with:
          name: vendor-${{ matrix.platform.id }}
          path: vendor/dist/vendor-${{ matrix.platform.id }}.tar.gz

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          if [[ '${{ github.repository }}' != 'koordinates/sno' ]]; then
            IS_FORK=1  # some other repo
          elif [[ -n '${{ github.event.pull_request.id }}' ]] && [[ '${{ github.event.pull_request.head.repo.full_name }}' != '${{ github.repository }}' ]]; then
            IS_FORK=1  # pr not on main repo
          else
            IS_FORK=0
          fi
          if (( ! $IS_FORK )) && [[ '${{ github.ref }}' =~ ^refs/tags/v(.*) ]]; then
            VER="${BASH_REMATCH[1]}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" sno/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "Is Fork PR? $IS_FORK"
          echo "$VER" > sno/VERSION
          echo "::set-output name=value::$VER"
          echo "::set-output name=is_release::$IS_RELEASE"
          echo "::set-output name=is_fork::$IS_FORK"

      - name: "app: install python dependencies"
        run: |
          make py-deps

      - name: "app: build"
        run: |
          make release
          venv/bin/sno --version

      #
      # App tests & checks
      #

      - name: "app: install test dependencies"
        run: |
          make py-deps-dev

      - name: "app: license check"
        run: |
          make py-license-check

      - name: "app: unit tests"
        run: |
          make ci-test

      - name: "app: save test coverage"
        uses: actions/upload-artifact@v2-preview
        with:
          name: test-results-${{ matrix.platform.id }}
          path: test-results/

      #
      # Packaging
      #
      - name: "üçé package: setup app signing certificate"
        id: keychain
        uses: apple-actions/import-codesign-certs@v1
        if: "runner.os == 'macOS' && steps.version.outputs.is_fork == 0"
        with:
          p12-file-base64: ${{ secrets.MACOS_APP_CERT }}
          p12-password: ${{ secrets.MACOS_CERT_PW }}

      - name: "üçé package: setup installer signing certificate"
        uses: apple-actions/import-codesign-certs@v1
        if: "runner.os == 'macOS' && steps.version.outputs.is_release == 1"
        with:
          create-keychain: false
          keychain-password: ${{ steps.keychain.outputs.keychain-password }}
          p12-file-base64: ${{ secrets.MACOS_INSTALLER_CERT }}
          p12-password: ${{ secrets.MACOS_CERT_PW }}

      - name: "üçé package: assemble"
        id: package-Darwin
        if: runner.os == 'macOS'
        env:
          NOTARIZE_USER: ${{ secrets.MACOS_NOTARIZE_USER }}
          NOTARIZE_PW: ${{ secrets.MACOS_NOTARIZE_PW }}
          NOTARIZE_PASSWORD: "@env:NOTARIZE_PW"
        run: |
          make py-tools

          if (( ! ${{ steps.version.outputs.is_fork }} )); then
            export CODESIGN="${{ secrets.MACOS_CODESIGN_ID }}"
          fi

          if (( ${{ steps.version.outputs.is_release }} )); then
            export PKGSIGN="${{ secrets.MACOS_PKGSIGN_ID }}"
            make -C platforms ci-pkg-notarize
          else
            make -C platforms pkg
          fi
          ls -la platforms/macos/dist/Sno-${{ steps.version.outputs.value }}.pkg
          echo "::set-output name=file::platforms/macos/dist/Sno-${{ steps.version.outputs.value }}.pkg"

      - name: "üêß package: assemble"
        id: package-Linux
        if: runner.os == 'Linux'
        run: |
          make -C platforms deb rpm
          ls -la platforms/linux/dist/*.rpm platforms/linux/dist/*.deb

      # Pre-cache cleanup

      - name: "package: cleanup"
        run: |
          sudo find vendor/dist -mindepth 1 -maxdepth 1 ! -name "vendor-*.tar.gz" -exec rm -rf {} \;

      #
      # Uploading packages
      #

      - name: "üçé package: save pkg"
        uses: actions/upload-artifact@v2-preview
        if: matrix.platform.id == 'Darwin'
        with:
          name: ${{ matrix.platform.name }}-pkg
          path: ${{ steps.package-Darwin.outputs.file }}

      - name: "üêß package: save deb"
        uses: actions/upload-artifact@v2-preview
        if: matrix.platform.id == 'Linux'
        with:
          name: ${{ matrix.platform.name }}-deb
          path: platforms/linux/dist/*.deb

      - name: "üêß package: save rpm"
        uses: actions/upload-artifact@v2-preview
        if: matrix.platform.id == 'Linux'
        with:
          name: ${{ matrix.platform.name }}-rpm
          path: platforms/linux/dist/*.rpm

      #
      # Package tests
      #

      - name: "üçé package: tests"
        if: matrix.platform.id == 'Darwin'
        run: |
          sudo installer -pkg ${{ steps.package-Darwin.outputs.file }} -dumplog -target /
          readlink $(which sno)
          tests/scripts/distcheck.sh
          PATH=/usr/local/opt/sqlite3/bin:$PATH tests/scripts/e2e-1.sh

      - name: "üêß package: tests"
        if: matrix.platform.id == 'Linux'
        run: |
          make -C platforms test-deb-all test-rpm-all

      #
      # Github release
      #

      - name: release
        uses: softprops/action-gh-release@v1
        if: "steps.version.outputs.is_release == 1"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            platforms/macos/dist/Sno-*.pkg
            platforms/linux/dist/*.deb
            platforms/linux/dist/*.rpm

  windows:
    name: Windows
    runs-on: windows-2016
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Windows builds with `[ci only posix]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !contains(github.event.head_commit.message, '[ci only posix]')
      )
    steps:
      - name: "msvc setup"
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: 14.0

      - uses: actions/checkout@v2

      #
      # python distribution
      #

      - name: "python"
        run: |
          $PY3=(Get-Command python).Definition
          echo "PY3=$PY3" >> $Env:GITHUB_ENV

      - name: "python: pip cache"
        uses: actions/cache@v1
        with:
          path: .cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('makefile.vc') }}
          restore-keys: |
            pip-${{ runner.os }}-

      #
      # vendor build
      #

      # get last time's vendor bundle
      # a hit here leads to skipping the rest of this job

      - name: "vendor-dist: cache"
        id: cache-dist
        uses: actions/cache@v1
        with:
          path: vendor/dist/
          key: vendor-dist-Windows-${{ hashFiles('vendor/makefile.vc') }}

      - name: "vendor: build"
        if: steps.cache-dist.outputs.cache-hit != 'true'
        working-directory: vendor
        env:
          PWSH: pwsh.exe
        run: |
          nmake /D /NoLogo /F makefile.vc

      - name: "vendor: save library bundle"
        uses: actions/upload-artifact@v2-preview
        with:
          name: vendor-Windows
          path: vendor/dist/vendor-Windows.zip

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          $IS_FORK = ( ('${{ github.repository }}' -ne 'koordinates/sno') -or ( '${{ github.event.pull_request.id }}' -and ( '${{ github.event.pull_request.head.repo.full_name }}' -ne '${{ github.repository }}') ) ) ? 1 : 0

          If ( (-not $IS_FORK) -and ('${{ github.ref }}'.StartsWith('refs/tags/v')) ) {
            $VER='${{ github.ref }}'.Substring(11)
            $IS_RELEASE=1
          } Else {
            $VER="$(Get-Content .\sno\VERSION)+ci.$($Env:GITHUB_SHA.Substring(0,8))"
            $IS_RELEASE=0
          }
          $VER -match '\d+\.\d+(\.\d+)?'
          $IVER=$Matches.0

          echo "App Version: $VER"
          echo "Installer Version: $IVER"
          echo "Is Release? $IS_RELEASE"
          echo "Is Fork PR? $IS_FORK"
          echo "$VER" > .\sno\VERSION
          echo "::set-output name=value::$VER"
          echo "::set-output name=installer::$IVER"
          echo "::set-output name=is_release::$IS_RELEASE"
          echo "::set-output name=is_fork::$IS_FORK"

      - name: "app: install python dependencies"
        run: |
          nmake /D /NoLogo /F makefile.vc venv\.requirements.installed

      - name: "app: build"
        run: |
          nmake /D /NoLogo /F makefile.vc
          venv\Scripts\sno.exe --version

      #
      # App tests & checks
      #

      - name: "app: install test dependencies"
        run: |
          nmake /D /NoLogo /F makefile.vc venv\.test.installed

      - name: "app: unit tests"
        run: |
          nmake /D /NoLogo /F makefile.vc ci-test

      - name: "app: save test coverage"
        uses: actions/upload-artifact@v2-preview
        with:
          name: test-results-Windows
          path: test-results/

      #
      # Packaging
      #

      - name: "package: assemble"
        id: package
        env:
          SNO_VERSION: ${{ steps.version.outputs.value }}
          SNO_INSTALLER_VERSION: ${{ steps.version.outputs.installer }}
          WIN_SIGN_AZURE_CERTIFICATE: ${{ secrets.WIN_SIGN_AZURE_CERTIFICATE }}
          SIGN_AZURE_VAULT: ${{ secrets.WIN_SIGN_AZURE_VAULT }}
          SIGN_AZURE_CLIENTID: ${{ secrets.WIN_SIGN_AZURE_CLIENTID }}
          SIGN_AZURE_CLIENTSECRET: ${{ secrets.WIN_SIGN_AZURE_CLIENTSECRET }}
        run: |
          If ( ${{ steps.version.outputs.is_release }} -eq 1 ) {
            dotnet tool install --global AzureSignTool --version 2.0.17

            $Env:SIGN_AZURE_CERTIFICATE=$Env:WIN_SIGN_AZURE_CERTIFICATE
          }

          nmake /D /NoLogo /F makefile.vc package
          echo "::set-output name=msi::platforms\windows\dist\Sno-${{ steps.version.outputs.value }}.msi"

      #
      # Uploading package
      #

      - name: "package: save msi"
        uses: actions/upload-artifact@v2-preview
        with:
          name: Windows-msi
          path: ${{ steps.package.outputs.msi }}

      #
      # Package tests
      #

      - name: "package: tests"
        run: |
          Start-Process msiexec.exe -Wait -ArgumentList '/I ${{github.workspace}}\${{ steps.package.outputs.msi }} /quiet /norestart /l* install.log'
          if (Test-Path install.log -PathType leaf) { Get-Content install.log }
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" +[System.Environment]::GetEnvironmentVariable("Path", "User")
          & sno --version
          & tests\scripts\distcheck.ps1
          & tests\scripts\e2e-1.ps1

      #
      # Github release
      #

      - name: release
        uses: softprops/action-gh-release@v1
        if: "steps.version.outputs.is_release == 1"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            ${{ steps.package.outputs.msi }}
