---
name: Build

on: [push, pull_request]

env:
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
  LIBGIT2_REPO: koordinates/libgit2
  LIBGIT2_TAG: kart-v0.11.1
  CMAKE_VERSION: "3.25.0"

jobs:
  # #
  # # Linux Builds
  # #
  # Linux:
  #   runs-on: ubuntu-20.04

  #   # We want to run on external PRs, but not on our own internal PRs as they'll be run
  #   # by the push to the branch.
  #   # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
  #   # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
  #   if: >
  #     (
  #       github.event_name == 'push'
  #       || github.event.pull_request.head.repo.full_name != github.repository
  #     ) && (
  #       startsWith(github.ref, 'refs/tags/v')
  #       || github.ref == 'refs/heads/master'
  #       || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only macos]'))
  #     )

  #   env:
  #     CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
  #     CCACHE_COMPRESS: "1"
  #     PY_VER: "3.9"
  #     KART_POSTGRES_URL: "postgresql://postgres:@localhost:5432/postgres"
  #     KART_SQLSERVER_URL: "mssql://sa:PassWord1@localhost:1433/master"
  #     KART_MYSQL_URL: "mysql://root:PassWord1@localhost:3306"
  #     FORCE_COLOR: "YES"
  #   services:
  #     postgis:
  #       image: postgis/postgis
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 2s
  #         --health-timeout 2s
  #         --health-retries 5
  #         -e POSTGRES_HOST_AUTH_METHOD=trust
  #       ports:
  #         - 5432:5432
  #     sqlserver:
  #       image: mcr.microsoft.com/mssql/server
  #       options: >-
  #         -e ACCEPT_EULA=Y
  #         -e SA_PASSWORD=PassWord1
  #       ports:
  #         - 1433:1433
  #     mysql:
  #       image: mysql
  #       options: >-
  #         -e MYSQL_ROOT_PASSWORD=PassWord1
  #       ports:
  #         - 3306:3306

  #   steps:
  #     - uses: actions/checkout@v3

  #     #
  #     # python distribution
  #     #

  #     - name: "python"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PY_VER }}

  #     - name: "python: pip cache"
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/pip
  #         key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements/*.txt', 'Makefile') }}
  #         restore-keys: |
  #           pip-${{ runner.os }}-

  #     #
  #     # vendor build
  #     #

  #     # get last time's vendor bundle
  #     # a hit here leads to skipping the rest of this phase

  #     - name: "vendor: dist cache"
  #       id: cache-vendor-dist
  #       uses: actions/cache@v3
  #       with:
  #         path: vendor/dist/vendor-Linux.tar.gz
  #         key: vendor-dist1-${{ runner.os }}-${{ env.PY_VER }}-${{ hashFiles('vendor/**/Makefile', 'vendor/Makefile', 'vendor/build-manylinux.sh') }}

  #     - name: "vendor: source cache"
  #       id: cache-vendor-source
  #       uses: actions/cache@v3
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       with:
  #         path: .cache/vendor-source
  #         key: vendor-source-${{ runner.os }}-${{ env.PY_VER }}-${{ hashFiles('vendor/**/Makefile', 'vendor/Makefile') }}

  #     - name: "vendor: source download"
  #       if: "steps.cache-vendor-dist.outputs.cache-hit != 'true' && steps.cache-vendor-source.outputs.cache-hit != 'true'"
  #       run: |
  #         tar xvf .cache/vendor-source/vendor.tar || true
  #         echo 'verbose = off' >> $HOME/.wgetrc
  #         make -C vendor sources
  #         mkdir -p .cache/vendor-source
  #         tar cvf .cache/vendor-source/vendor.tar vendor/*/*.tar.* vendor/*/*.zip

  #     - name: "vendor: ccache"
  #       uses: actions/cache@v3
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: vendor-ccache-${{ runner.os }}

  #     - name: "vendor: build"
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       run: |
  #         sudo apt-get install -q -y ccache
  #         tar xvf .cache/vendor-source/vendor.tar
  #         echo 'verbose = off' >> $HOME/.wgetrc
  #         mkdir -p ${{ env.CCACHE_DIR }}
  #         make -C vendor build-Linux

  #     - name: "vendor: save library bundle"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: vendor-Linux
  #         path: vendor/dist/vendor-Linux.tar.gz

  #     #
  #     # App Build
  #     #

  #     - name: "app: version"
  #       id: version
  #       run: |
  #         if [[ '${{ github.repository }}' != 'koordinates/kart' ]]; then
  #           IS_FORK=1  # some other repo
  #         elif [[ -n '${{ github.event.pull_request.id }}' ]] && [[ '${{ github.event.pull_request.head.repo.full_name }}' != '${{ github.repository }}' ]]; then
  #           IS_FORK=1  # pr not on main repo
  #         else
  #           IS_FORK=0
  #         fi
  #         if (( ! $IS_FORK )) && [[ '${{ github.ref }}' =~ ^refs/tags/v(.*) ]]; then
  #           VER="${BASH_REMATCH[1]}"
  #           IS_RELEASE=1
  #         else
  #           VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
  #           IS_RELEASE=0
  #         fi
  #         echo "App Version: $VER"
  #         echo "Is Release? $IS_RELEASE"
  #         echo "Is Fork PR? $IS_FORK"
  #         echo "$VER" > kart/VERSION
  #         echo "::set-output name=value::$VER"
  #         echo "::set-output name=is_release::$IS_RELEASE"
  #         echo "::set-output name=is_fork::$IS_FORK"

  #     - name: "app: install python dependencies"
  #       run: |
  #         make py-deps

  #     - name: "app: build"
  #       run: |
  #         make release
  #         venv/bin/kart --version

  #     - name: "app: cli-helper"
  #       run: |
  #         make cli-helper

  #     #
  #     # App tests & checks
  #     #

  #     - name: "app: install test dependencies"
  #       run: |
  #         make py-deps-dev

  #     - name: "app: install database drivers for tests"
  #       run: |
  #         curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
  #         curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null
  #         sudo apt-get update -q
  #         sudo ACCEPT_EULA=Y apt-get install -q -y msodbcsql17

  #     - name: "app: license check"
  #       run: |
  #         make py-license-check

  #     - name: "app: unit tests"
  #       run: |
  #         make ci-test

  #     - name: "app: save test coverage"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: test-results-Linux
  #         path: test-results/

  #     #
  #     # Packaging
  #     #
  #     - name: "package: assemble"
  #       id: package-Linux
  #       run: |
  #         make -C platforms deb rpm
  #         ls -la platforms/linux/dist/*.rpm platforms/linux/dist/*.deb

  #     #
  #     # Uploading packages
  #     #

  #     - name: "package: save deb"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Linux-deb
  #         path: platforms/linux/dist/*.deb

  #     - name: "package: save rpm"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Linux-rpm
  #         path: platforms/linux/dist/*.rpm

  #     - name: "package: save packaging logs"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: packaging-logs-Linux
  #         path: |
  #           platforms/*/build/kart/*.toc
  #           platforms/*/build/kart/*.txt
  #           platforms/*/build/kart/*.html

  #     #
  #     # Package tests
  #     #

  #     - name: "package: tests"
  #       run: |
  #         make -C platforms test-deb-all test-rpm-all

  #     #
  #     # Github release
  #     #

  #     - name: release
  #       uses: softprops/action-gh-release@v1
  #       if: "steps.version.outputs.is_release == 1"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         draft: true
  #         files: |
  #           platforms/linux/dist/*.deb
  #           platforms/linux/dist/*.rpm

  # #
  # # Windows Builds
  # #
  # windows:
  #   name: Windows
  #   runs-on: windows-2019
  #   env:
  #     PY_VER: "3.9"
  #     FORCE_COLOR: "YES"

  #   # We want to run on external PRs, but not on our own internal PRs as they'll be run
  #   # by the push to the branch.
  #   # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
  #   # Skip Windows builds with eg: `[ci only linux]` unless it's master or a release tag.
  #   if: >
  #     (
  #       github.event_name == 'push'
  #       || github.event.pull_request.head.repo.full_name != github.repository
  #     ) && (
  #       startsWith(github.ref, 'refs/tags/v')
  #       || github.ref == 'refs/heads/master'
  #       || !(contains(github.event.head_commit.message, '[ci only linux]') || contains(github.event.head_commit.message, '[ci only macos]'))
  #     )
  #   steps:
  #     - name: "msvc setup"
  #       uses: ilammy/msvc-dev-cmd@v1
  #       with:
  #         arch: x64
  #         toolset: 14.0

  #     - uses: actions/checkout@v3

  #     #
  #     # python distribution
  #     #

  #     - name: "python"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PY_VER }}
  #         architecture: x64

  #     - name: "python: pip cache"
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/pip
  #         key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements/*.txt', 'makefile.vc') }}
  #         restore-keys: |
  #           pip-${{ runner.os }}-

  #     - name: "python: env"
  #       run: |
  #         $PY3=(Get-Command python).Definition
  #         echo "PY3=$PY3" >> $Env:GITHUB_ENV

  #     #
  #     # vendor build
  #     #

  #     # get last time's vendor bundle
  #     # a hit here leads to skipping the rest of this job

  #     - name: "vendor-dist: cache"
  #       id: cache-dist
  #       uses: actions/cache@v3
  #       with:
  #         path: vendor/dist/
  #         key: vendor-dist2-${{ runner.os }}-${{ hashFiles('vendor/makefile.vc') }}

  #     - name: "vendor: build"
  #       if: steps.cache-dist.outputs.cache-hit != 'true'
  #       working-directory: vendor
  #       env:
  #         PWSH: pwsh.exe
  #       run: |
  #         $ErrorView = 'NormalView'
  #         nmake /D /NoLogo /F makefile.vc

  #     - name: "vendor: save library bundle"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: vendor-Windows
  #         path: vendor/dist/vendor-Windows.zip

  #     #
  #     # App Build
  #     #

  #     - name: "app: version"
  #       id: version
  #       run: |
  #         $ErrorView = 'NormalView'
  #         $IS_FORK = ( ('${{ github.repository }}' -ne 'koordinates/kart') -or ( '${{ github.event.pull_request.id }}' -and ( '${{ github.event.pull_request.head.repo.full_name }}' -ne '${{ github.repository }}') ) ) ? 1 : 0

  #         If ( (-not $IS_FORK) -and ('${{ github.ref }}'.StartsWith('refs/tags/v')) ) {
  #           $VER='${{ github.ref }}'.Substring(11)
  #           $IS_RELEASE=1
  #         } Else {
  #           $VER="$(Get-Content .\kart\VERSION)+ci.$($Env:GITHUB_SHA.Substring(0,8))"
  #           $IS_RELEASE=0
  #         }
  #         $VER -match '\d+\.\d+(\.\d+)?'
  #         $IVER=$Matches.0

  #         echo "App Version: $VER"
  #         echo "Installer Version: $IVER"
  #         echo "Is Release? $IS_RELEASE"
  #         echo "Is Fork PR? $IS_FORK"
  #         echo "$VER" > .\kart\VERSION
  #         echo "::set-output name=value::$VER"
  #         echo "::set-output name=installer::$IVER"
  #         echo "::set-output name=is_release::$IS_RELEASE"
  #         echo "::set-output name=is_fork::$IS_FORK"

  #     - name: "app: install python dependencies"
  #       run: |
  #         & nmake /D /NoLogo /F makefile.vc venv\.requirements.installed

  #     - name: "app: build"
  #       run: |
  #         & nmake /D /NoLogo /F makefile.vc
  #         if (-not $?) {throw "Build failed"}
  #         & .\venv\Scripts\kart.exe --version

  #     #
  #     # App tests & checks
  #     #

  #     - name: "app: install test dependencies"
  #       run: |
  #         & nmake /D /NoLogo /F makefile.vc venv\.test.installed

  #     - name: "app: unit tests"
  #       env:
  #         KART_EXPECT_GITSPATIALFILTER: 0
  #       run: |
  #         & nmake /D /NoLogo /F makefile.vc ci-test

  #     - name: "app: save test coverage"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: test-results-Windows
  #         path: test-results/

  #     #
  #     # Packaging
  #     #

  #     - name: "package: assemble"
  #       id: package
  #       env:
  #         KART_VERSION: ${{ steps.version.outputs.value }}
  #         KART_INSTALLER_VERSION: ${{ steps.version.outputs.installer }}
  #         WIN_SIGN_AZURE_CERTIFICATE: ${{ secrets.WIN_SIGN_AZURE_CERTIFICATE }}
  #         SIGN_AZURE_VAULT: ${{ secrets.WIN_SIGN_AZURE_VAULT }}
  #         SIGN_AZURE_CLIENTID: ${{ secrets.WIN_SIGN_AZURE_CLIENTID }}
  #         SIGN_AZURE_CLIENTSECRET: ${{ secrets.WIN_SIGN_AZURE_CLIENTSECRET }}
  #         SIGN_AZURE_TENANTID: ${{ secrets.WIN_SIGN_AZURE_TENANTID }}
  #       run: |
  #         $ErrorView = 'NormalView'
  #         If ( ${{ steps.version.outputs.is_release }} -eq 1 ) {
  #           & dotnet tool install --global AzureSignTool --version 3.0.0
  #           if (-not $?) {throw "Code-signing failed"}
  #           $Env:SIGN_AZURE_CERTIFICATE=$Env:WIN_SIGN_AZURE_CERTIFICATE
  #         }

  #         & nmake /D /NoLogo /F makefile.vc package
  #         if (-not $?) {throw "Packaging failed"}
  #         echo "::set-output name=msi::platforms\windows\dist\Kart-${{ steps.version.outputs.value }}.msi"

  #     #
  #     # Uploading package
  #     #

  #     - name: "package: save msi"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Windows-msi
  #         path: ${{ steps.package.outputs.msi }}

  #     - name: "package: save packaging logs"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: packaging-logs-Windows
  #         path: |
  #           platforms/windows/build/kart/*.toc
  #           platforms/windows/build/kart/*.txt
  #           platforms/windows/build/kart/*.html

  #     #
  #     # Package tests
  #     #

  #     - name: "package: tests"
  #       run: |
  #         $ErrorView = 'NormalView'
  #         Start-Process msiexec.exe -Wait -ArgumentList '/I ${{github.workspace}}\${{ steps.package.outputs.msi }} /quiet /norestart /l* install.log'
  #         if (Test-Path install.log -PathType leaf) { Get-Content install.log }
  #         $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" +[System.Environment]::GetEnvironmentVariable("Path", "User")
  #         & kart --version
  #         if (-not $?) {throw "Smoke test Failed"}
  #         & tests\scripts\distcheck.ps1
  #         if (-not $?) {throw "Distribution test Failed"}
  #         & tests\scripts\e2e-1.ps1
  #         if (-not $?) {throw "E2E test Failed"}

  #     #
  #     # Github release
  #     #

  #     - name: release
  #       uses: softprops/action-gh-release@v1
  #       if: "steps.version.outputs.is_release == 1"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         draft: true
  #         files: |
  #           ${{ steps.package.outputs.msi }}

  # #
  # # macOS Builds
  # #
  # macOS:
  #   runs-on: macos-latest

  #   # We want to run on external PRs, but not on our own internal PRs as they'll be run
  #   # by the push to the branch.
  #   # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
  #   # Skip macOS builds with eg: `[ci only linux]` unless it's master or a release tag.
  #   if: >
  #     (
  #       github.event_name == 'push'
  #       || github.event.pull_request.head.repo.full_name != github.repository
  #     ) && (
  #       startsWith(github.ref, 'refs/tags/v')
  #       || github.ref == 'refs/heads/master'
  #       || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only linux]'))
  #     )

  #   env:
  #     CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
  #     CCACHE_COMPRESS: "1"
  #     PY_VER: "3.9"
  #     HOMEBREW_CACHE: ${{ github.workspace }}/.cache/brew
  #     HOMEBREW_NO_INSTALL_CLEANUP: "1"
  #     FORCE_COLOR: "YES"
  #   steps:
  #     - uses: actions/checkout@v3

  #     #
  #     # python distribution
  #     #
  #     - name: "python"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PY_VER }}

  #     - name: "python: pip cache"
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/pip
  #         key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements/*.txt', 'Makefile') }}
  #         restore-keys: |
  #           pip-${{ runner.os }}-

  #     #
  #     # vendor build
  #     #

  #     - name: "homebrew cache"
  #       id: cache-brew
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/brew
  #         key: brew-${{ runner.os }}

  #     - name: "prerequisites"
  #       run: |
  #         brew uninstall --force php composer
  #         brew update-reset
  #         brew install bash
  #         echo "/usr/local/bin" >> $GITHUB_PATH
  #         brew upgrade python@3.9 || echo "The link step of `brew upgrade python@3.9` fails. This is okay."
  #         brew install --force ccache pkg-config sqlite3 pandoc
  #         brew install --force --cask Packages
  #         brew bundle install --file=vendor/Brewfile
  #         echo "Currently installed vendor dependencies:"
  #         cat vendor/Brewfile | xargs brew list --versions --formulae | sort | tee vendor/Brewfile.lock

  #     # get last time's vendor bundle
  #     # a hit here leads to skipping the rest of this phase

  #     - name: "vendor: dist cache"
  #       id: cache-vendor-dist
  #       uses: actions/cache@v3
  #       with:
  #         path: vendor/dist/vendor-Darwin.tar.gz
  #         key: vendor-dist1-${{ runner.os }}-${{ env.PY_VER }}-${{ hashfiles('vendor/Brewfile.lock', 'vendor/**/Makefile', 'vendor/Makefile') }}

  #     - name: "vendor: source cache"
  #       id: cache-vendor-source
  #       uses: actions/cache@v3
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       with:
  #         path: .cache/vendor-source
  #         key: vendor-source-${{ runner.os }}-${{ env.PY_VER }}-${{ hashFiles('vendor/**/Makefile', 'vendor/Makefile') }}

  #     - name: "vendor: source download"
  #       if: "steps.cache-vendor-dist.outputs.cache-hit != 'true' && steps.cache-vendor-source.outputs.cache-hit != 'true'"
  #       run: |
  #         tar xvf .cache/vendor-source/vendor.tar || true
  #         echo 'verbose = off' >> $HOME/.wgetrc
  #         make -C vendor sources
  #         mkdir -p .cache/vendor-source
  #         tar cvf .cache/vendor-source/vendor.tar vendor/*/*.tar.* vendor/*/*.zip

  #     - name: "vendor: ccache"
  #       uses: actions/cache@v3
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: vendor-ccache-${{ runner.os }}

  #     - name: "vendor: build"
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       run: |
  #         tar xvf .cache/vendor-source/vendor.tar
  #         echo 'verbose = off' >> $HOME/.wgetrc
  #         mkdir -p ${{ env.CCACHE_DIR }}
  #         make -C vendor build-Darwin

  #     - name: "vendor: save library bundle"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: vendor-Darwin
  #         path: vendor/dist/vendor-Darwin.tar.gz

  #     #
  #     # App Build
  #     #

  #     - name: "app: version"
  #       id: version
  #       run: |
  #         if [[ '${{ github.repository }}' != 'koordinates/kart' ]]; then
  #           IS_FORK=1  # some other repo
  #         elif [[ -n '${{ github.event.pull_request.id }}' ]] && [[ '${{ github.event.pull_request.head.repo.full_name }}' != '${{ github.repository }}' ]]; then
  #           IS_FORK=1  # pr not on main repo
  #         else
  #           IS_FORK=0
  #         fi
  #         if (( ! $IS_FORK )) && [[ '${{ github.ref }}' =~ ^refs/tags/v(.*) ]]; then
  #           VER="${BASH_REMATCH[1]}"
  #           IS_RELEASE=1
  #         else
  #           VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
  #           IS_RELEASE=0
  #         fi
  #         echo "App Version: $VER"
  #         echo "Is Release? $IS_RELEASE"
  #         echo "Is Fork PR? $IS_FORK"
  #         echo "$VER" > kart/VERSION
  #         echo "::set-output name=value::$VER"
  #         echo "::set-output name=is_release::$IS_RELEASE"
  #         echo "::set-output name=is_fork::$IS_FORK"

  #     - name: "app: install python dependencies"
  #       run: |
  #         make py-deps

  #     - name: "app: build"
  #       run: |
  #         make release
  #         venv/bin/kart --version

  #     - name: "app: cli-helper"
  #       run: |
  #         make cli-helper

  #     #
  #     # App tests & checks
  #     #

  #     - name: "app: install test dependencies"
  #       run: |
  #         make py-deps-dev

  #     - name: "app: license check"
  #       run: |
  #         make py-license-check

  #     - name: "app: unit tests"
  #       env:
  #         KART_EXPECT_MSSQLDRIVER: 0
  #       run: |
  #         make ci-test

  #     - name: "app: save test coverage"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: test-results-macOS
  #         path: test-results/

  #     #
  #     # Packaging
  #     #
  #     - name: "package: setup app signing certificate"
  #       id: keychain
  #       uses: apple-actions/import-codesign-certs@v1
  #       if: "steps.version.outputs.is_fork == 0 && github.actor != 'dependabot[bot]'"
  #       with:
  #         p12-file-base64: ${{ secrets.MACOS_APP_CERT }}
  #         p12-password: ${{ secrets.MACOS_CERT_PW }}

  #     - name: "package: setup installer signing certificate"
  #       uses: apple-actions/import-codesign-certs@v1
  #       if: "steps.version.outputs.is_release == 1"
  #       with:
  #         create-keychain: false
  #         keychain-password: ${{ steps.keychain.outputs.keychain-password }}
  #         p12-file-base64: ${{ secrets.MACOS_INSTALLER_CERT }}
  #         p12-password: ${{ secrets.MACOS_CERT_PW }}

  #     - name: "package: assemble"
  #       id: package-Darwin
  #       env:
  #         NOTARIZE_USER: ${{ secrets.MACOS_NOTARIZE_USER }}
  #         NOTARIZE_PW: ${{ secrets.MACOS_NOTARIZE_PW }}
  #         NOTARIZE_PASSWORD: "@env:NOTARIZE_PW"
  #       run: |
  #         make py-tools

  #         if (( ! ${{ steps.version.outputs.is_fork }} )); then
  #           export CODESIGN="${{ secrets.MACOS_CODESIGN_ID }}"
  #         fi

  #         if (( ${{ steps.version.outputs.is_release }} )); then
  #           export PKGSIGN="${{ secrets.MACOS_PKGSIGN_ID }}"
  #           make -C platforms ci-pkg-notarize
  #         else
  #           make -C platforms pkg
  #         fi
  #         ls -la platforms/macos/dist/Kart-${{ steps.version.outputs.value }}.pkg
  #         echo "::set-output name=file::platforms/macos/dist/Kart-${{ steps.version.outputs.value }}.pkg"

  #     #
  #     # Uploading packages
  #     #

  #     - name: "package: save pkg"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: macos-pkg
  #         path: ${{ steps.package-Darwin.outputs.file }}

  #     - name: "package: save packaging logs"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: packaging-logs-macOS
  #         path: |
  #           platforms/*/build/kart/*.toc
  #           platforms/*/build/kart/*.txt
  #           platforms/*/build/kart/*.html

  #     #
  #     # Package tests
  #     #

  #     - name: "package: tests"
  #       run: |
  #         sudo installer -pkg ${{ steps.package-Darwin.outputs.file }} -dumplog -target /
  #         readlink $(which kart)
  #         tests/scripts/distcheck.sh
  #         PATH=/usr/local/opt/sqlite3/bin:$PATH tests/scripts/e2e-1.sh

  #     #
  #     # Github release
  #     #

  #     - name: release
  #       uses: softprops/action-gh-release@v1
  #       if: "steps.version.outputs.is_release == 1"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         draft: true
  #         files: |
  #           platforms/macos/dist/Kart-*.pkg

  # #
  # # Linux via CMake
  # #
  # Linux-cmake:
  #   runs-on: ubuntu-20.04
  #   continue-on-error: true

  #   # We want to run on external PRs, but not on our own internal PRs as they'll be run
  #   # by the push to the branch.
  #   # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
  #   # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
  #   if: >
  #     (
  #       github.event_name == 'push'
  #       || github.event.pull_request.head.repo.full_name != github.repository
  #     ) && (
  #       startsWith(github.ref, 'refs/tags/v')
  #       || github.ref == 'refs/heads/master'
  #       || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only macos]'))
  #     )

  #   env:
  #     CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
  #     CCACHE_COMPRESS: "1"
  #     PY_VER: "3.9"
  #     KART_POSTGRES_URL: "postgresql://postgres:@localhost:5432/postgres"
  #     KART_SQLSERVER_URL: "mssql://sa:PassWord1@localhost:1433/master"
  #     KART_MYSQL_URL: "mysql://root:PassWord1@localhost:3306"
  #     FORCE_COLOR: "YES"
  #   services:
  #     postgis:
  #       image: postgis/postgis
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 2s
  #         --health-timeout 2s
  #         --health-retries 5
  #         -e POSTGRES_HOST_AUTH_METHOD=trust
  #       ports:
  #         - 5432:5432
  #     sqlserver:
  #       image: mcr.microsoft.com/mssql/server
  #       options: >-
  #         -e ACCEPT_EULA=Y
  #         -e SA_PASSWORD=PassWord1
  #       ports:
  #         - 1433:1433
  #     mysql:
  #       image: mysql
  #       options: >-
  #         -e MYSQL_ROOT_PASSWORD=PassWord1
  #       ports:
  #         - 3306:3306

  #   steps:
  #     - uses: actions/checkout@v3

  #     #
  #     # setup
  #     #

  #     - name: "python"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PY_VER }}

  #     - name: "python: pip cache"
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/pip
  #         key: pip-${{ runner.os }}-cmake-${{ hashFiles('requirements.txt', 'requirements/*.txt', 'Makefile') }}
  #         restore-keys: |
  #           pip-Linux-cmake

  #     - name: "ccache"
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: vendor-ccache-${{ runner.os }}-cmake

  #     - name: "setup: cmake & ninja"
  #       uses: lukka/get-cmake@v3.24.3
  #       with:
  #         cmakeVersion: "${{ env.CMAKE_VERSION }}"

  #     #
  #     # Dependencies
  #     #

  #     - name: "build dependencies"
  #       run: |
  #         sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
  #         sudo apt-get install -q -y --no-install-recommends ccache \
  #           libgdal-dev gdal-data libssl-dev libpq-dev libspatialindex-dev \
  #           libsqlite3-mod-spatialite sqlite3 swig4.0 unixodbc
  #         mkdir -p ${{ env.CCACHE_DIR }}

  #     - name: "dependency: libgit2"
  #       run: |
  #         mkdir ${{ runner.temp }}/libgit2
  #         cd ${{ runner.temp }}/libgit2
  #         git init
  #         git remote add origin https://github.com/${{ env.LIBGIT2_REPO }}.git
  #         git fetch -q --depth 1 origin ${{ env.LIBGIT2_TAG }}
  #         git checkout FETCH_HEAD
  #         cmake -Wno-dev -B build -S . \
  #           -DBUILD_CLAR=OFF \
  #           -DCMAKE_C_COMPILER=/usr/lib/ccache/cc \
  #           -DCMAKE_CXX_COMPILER=/usr/lib/ccache/c++
  #         cmake --build build
  #         sudo cmake --install build
  #         sudo ldconfig

  #     #
  #     # App Build
  #     #

  #     - name: "app: configure"
  #       run: |
  #         cmake -B build -S . \
  #           -DSpatiaLite_EXTENSION=/usr/lib/x86_64-linux-gnu/mod_spatialite.so \
  #           -DPROJ_DATADIR=/usr/share/proj

  #     - name: "app: build"
  #       run: |
  #         cmake --build build
  #         ./build/kart --version

  #     #
  #     # App tests & checks
  #     #

  #     - name: "app: install database drivers for tests"
  #       run: |
  #         curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
  #         curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null
  #         sudo apt-get update -q -y
  #         sudo ACCEPT_EULA=Y apt-get install -q -y msodbcsql17

  #     - name: "app: unit tests"
  #       env:
  #         KART_EXPECT_GITFILTEREXTENSION: 0
  #         KART_EXPECT_GITSPATIALFILTER: 0
  #       working-directory: build
  #       run: |
  #         ctest -V

  # #
  # # macOS via CMake
  # #
  # macOS-cmake:
  #   runs-on: macos-11
  #   continue-on-error: true

  #   # We want to run on external PRs, but not on our own internal PRs as they'll be run
  #   # by the push to the branch.
  #   # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
  #   # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
  #   if: >
  #     (
  #       github.event_name == 'push'
  #       || github.event.pull_request.head.repo.full_name != github.repository
  #     ) && (
  #       startsWith(github.ref, 'refs/tags/v')
  #       || github.ref == 'refs/heads/master'
  #       || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only linux]'))
  #     )

  #   env:
  #     CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
  #     CCACHE_COMPRESS: "1"
  #     PY_VER: "3.10"
  #     HOMEBREW_CACHE: ${{ github.workspace }}/.cache/brew
  #     HOMEBREW_NO_INSTALL_CLEANUP: "1"
  #     FORCE_COLOR: "YES"

  #   steps:
  #     - uses: actions/checkout@v3

  #     #
  #     # setup
  #     #

  #     - name: "python"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PY_VER }}

  #     - name: "homebrew cache"
  #       id: cache-brew
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/brew
  #         key: brew-cmake-${{ runner.os }}

  #     - name: "vendor: ccache"
  #       uses: actions/cache@v3
  #       if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: vendor-ccache-${{ runner.os }}

  #     #
  #     # python distribution
  #     #

  #     - name: "python: pip cache"
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/pip
  #         key: pip-${{ runner.os }}-cmake-${{ hashFiles('requirements.txt', 'requirements/*.txt', 'Makefile') }}
  #         restore-keys: |
  #           pip-${{ runner.os }}-cmake

  #     #
  #     # Dependencies
  #     #

  #     - name: "setup: cmake & ninja"
  #       uses: lukka/get-cmake@v3.24.3
  #       with:
  #         cmakeVersion: "${{ env.CMAKE_VERSION }}"

  #     - name: "build dependencies"
  #       run: |
  #         brew install ccache gdal openssl@1.1 libpq \
  #           spatialindex libspatialite sqlite3 swig unixodbc
  #         mkdir -p ${{ env.CCACHE_DIR }}

  #     - name: "dependency: libgit2"
  #       run: |
  #         mkdir ${{ runner.temp }}/libgit2
  #         cd ${{ runner.temp }}/libgit2
  #         git init
  #         git remote add origin https://github.com/${{ env.LIBGIT2_REPO }}.git
  #         git fetch -q --depth 1 origin ${{ env.LIBGIT2_TAG }}
  #         git checkout FETCH_HEAD
  #         cmake -Wno-dev -B build -S . \
  #           -DBUILD_CLAR=OFF \
  #           -DCMAKE_C_COMPILER=/usr/local/opt/ccache/libexec/cc \
  #           -DCMAKE_CXX_COMPILER=/usr/local/opt/ccache/libexec/c++
  #         cmake --build build
  #         cmake --install build

  #     #
  #     # App Build
  #     #

  #     - name: "app: configure"
  #       run: |
  #         cmake -B build -S .

  #     - name: "app: build"
  #       run: |
  #         cmake --build build
  #         ./build/kart --version

  #     #
  #     # App tests & checks
  #     #

  #     - name: "app: unit tests"
  #       env:
  #         KART_EXPECT_GITFILTEREXTENSION: 0
  #         KART_EXPECT_GITSPATIALFILTER: 0
  #         KART_EXPECT_MSSQLDRIVER: 0
  #       working-directory: build
  #       run: |
  #         ctest -V

  # #
  # # Windows via CMake
  # #
  # Windows-cmake:
  #   needs: Windows
  #   runs-on: windows-2019
  #   continue-on-error: true
  #   env:
  #     PY_VER: "3.9" # needs to match the Windows job since we use its vendor archive.
  #     FORCE_COLOR: "YES"

  #   # We want to run on external PRs, but not on our own internal PRs as they'll be run
  #   # by the push to the branch.
  #   # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
  #   # Skip Windows builds with eg: `[ci only linux]` unless it's master or a release tag.
  #   if: >
  #     (
  #       github.event_name == 'push'
  #       || github.event.pull_request.head.repo.full_name != github.repository
  #     ) && (
  #       startsWith(github.ref, 'refs/tags/v')
  #       || github.ref == 'refs/heads/master'
  #       || !(contains(github.event.head_commit.message, '[ci only linux]') || contains(github.event.head_commit.message, '[ci only macos]'))
  #     )
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: "setup: cmake"
  #       uses: lukka/get-cmake@v3.24.3
  #       with:
  #         cmakeVersion: "${{ env.CMAKE_VERSION }}"

  #     #
  #     # python distribution
  #     #

  #     - name: "python"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "${{ env.PY_VER }}"
  #         architecture: x64

  #     - name: "python: pip cache"
  #       uses: actions/cache@v3
  #       with:
  #         path: .cache/pip
  #         key: pip-${{ runner.os }}-cmake-${{ hashFiles('requirements.txt', 'requirements/*.txt', 'makefile.vc') }}
  #         restore-keys: |
  #           pip-${{ runner.os }}-cmake-

  #     #
  #     # vendor bundle
  #     #

  #     - name: "vendor-dist: download"
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: vendor-Windows
  #         path: vendor/dist/

  #     #
  #     # App Build
  #     #

  #     - name: "configure"
  #       run: |
  #         $ErrorView = 'NormalView'
  #         # Python3.exe gets found by FindPython3, but it's a symlink
  #         # and this breaks virtualenv creation
  #         # https://github.com/actions/virtual-environments/issues/2690
  #         & cmake --log-level=VERBOSE -B build -S . -G "Visual Studio 16 2019" -A x64 -DVENDOR_ARCHIVE=${{ github.workspace }}\vendor\dist\vendor-Windows.zip -DPython3_ROOT=${{ env.pythonLocation }} -DPython3_EXECUTABLE=${{ env.pythonLocation }}\Python.exe

  #     - name: "build"
  #       run: |
  #         $ErrorView = 'NormalView'
  #         & cmake --build build --config Release
  #         if (-not $?) {throw "Build failed"}
  #         & .\build\kart --version
  #         if (-not $?) {throw "Smoke test failed"}

  #     #
  #     # App tests & checks
  #     #

  #     - name: "app: unit tests"
  #       env:
  #         KART_EXPECT_GITSPATIALFILTER: 0
  #       working-directory: build
  #       run: |
  #         & ctest -V -C Release -j2

  #
  # CMAKE + VCPKG
  # -------------
  #

  #
  # Linux via CMake+VCPKG
  #
  Linux-cmake-vcpkg:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        python: ["3.10"]
    runs-on: ${{ matrix.os }}

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only macos]'))
      )

    env:
      CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
      CCACHE_COMPRESS: "1"
      PY_VER: ${{ matrix.python }}
      KART_POSTGRES_URL: "postgresql://postgres:@localhost:5432/postgres"
      KART_SQLSERVER_URL: "mssql://sa:PassWord1@localhost:1433/master"
      KART_MYSQL_URL: "mysql://root:PassWord1@localhost:3306"
      FORCE_COLOR: "YES"

    services:
      postgis:
        image: postgis/postgis
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 2s
          --health-retries 5
          -e POSTGRES_HOST_AUTH_METHOD=trust
        ports:
          - 5432:5432
      sqlserver:
        image: mcr.microsoft.com/mssql/server
        options: >-
          -e ACCEPT_EULA=Y
          -e SA_PASSWORD=PassWord1
        ports:
          - 1433:1433
      mysql:
        image: mysql
        options: >-
          -e MYSQL_ROOT_PASSWORD=PassWord1
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      #
      # setup
      #

      - name: "setup: python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: "setup: cmake & ninja"
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: "${{ env.CMAKE_VERSION }}"

      - name: "setup: ccache"
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: vendor-ccache-${{ runner.os }}-cmake-vcpkg

      - name: "setup: misc"
        run: |
          sudo apt-get install -q -y --no-install-recommends ccache
          mkdir -p ${{ env.CCACHE_DIR }}
          echo "/usr/lib/ccache" >> $GITHUB_PATH

      - name: "setup: vcpkg"
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg-vendor/vcpkg"
          vcpkgJsonGlob: "**/vcpkg-vendor/vcpkg.json"
          prependedCacheKey: "20221110a"
          appendedCacheKey: "C${{ env.CMAKE_VERSION}}:${{ hashFiles('vcpkg-vendor/vcpkg-overlay-triplets/**', 'vcpkg-vendor/vcpkg-overlay-ports/**', 'vcpkg-vendor/vcpkg-toolchain-setup.cmake') }}"

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]] && [[ '${{ github.ref_name }}' =~ ^v(.*) ]]; then
            VER="${{ github.ref_name }}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "$VER" > kart/VERSION
          echo "value=$VER" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: "app: vendor dependencies"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux

      - name: "check for vcpkg errors"
        if: ${{ failure() || cancelled() }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV

      - name: "app: build"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          buildPreset: ci-linux

      - name: "vendor: save archive"
        uses: actions/upload-artifact@v3
        with:
          name: vendor-linux-${{ runner.arch }}-${{ matrix.python }}
          path: build/vcpkg-vendor/kart-vendor.*.tar.gz

      #
      # App tests & checks
      #

      - name: "test: smoke test"
        run: |
          ./build/kart --version

      - name: "test: install database drivers for tests"
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null
          sudo apt-get update -q -y
          sudo ACCEPT_EULA=Y apt-get install -q -y msodbcsql17

      - name: "test: unit tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          testPreset: ci-linux

      - name: "test: dependency license check"
        run: |
          cmake --build build --target py-license-check

      #
      # Packaging
      #

      - name: "bundle: assemble"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          buildPreset: ci-bundle-linux

      - name: "bundle: smoke test"
        shell: bash
        run: |
          ./build/pyinstaller/dist/kart/kart --version

      - name: "bundle: e2e tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-linux
          testPreset: ci-e2e-linux

  #
  # macOS via CMake+VCPKG
  #
  macOS-cmake-vcpkg:
    strategy:
      matrix:
        os: [macos-12]
        python: ["3.10"]
    runs-on: ${{ matrix.os }}

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Linux builds with eg: `[ci only windows]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !(contains(github.event.head_commit.message, '[ci only windows]') || contains(github.event.head_commit.message, '[ci only linux]'))
      )

    env:
      CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
      CCACHE_COMPRESS: "1"
      PY_VER: ${{ matrix.python }}
      HOMEBREW_CACHE: ${{ github.workspace }}/.cache/brew
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
      FORCE_COLOR: "YES"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      #
      # setup
      #

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: "setup: python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: "setup: homebrew cache"
        id: cache-brew
        uses: actions/cache@v3
        with:
          path: .cache/brew
          key: brew-cmake-${{ runner.os }}-vcpkg

      - name: "setup: cmake & ninja"
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: "${{ env.CMAKE_VERSION }}"

      - name: "setup: ccache"
        uses: actions/cache@v3
        if: steps.cache-vendor-dist.outputs.cache-hit != 'true'
        with:
          path: ${{ env.CCACHE_DIR }}
          key: vendor-ccache-${{ runner.os }}-vcpkg

      - name: "setup: misc"
        run: |
          brew install -q autoconf automake ccache
          mkdir -p ${{ env.CCACHE_DIR }}
          echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH

      - name: "setup: vcpkg"
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg-vendor/vcpkg"
          vcpkgJsonGlob: "**/vcpkg-vendor/vcpkg.json"
          prependedCacheKey: "20221110a"
          appendedCacheKey: "C${{ env.CMAKE_VERSION}}:${{ hashFiles('vcpkg-vendor/vcpkg-overlay-triplets/**', 'vcpkg-vendor/vcpkg-overlay-ports/**', 'vcpkg-vendor/vcpkg-toolchain-setup.cmake') }}"

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]] && [[ '${{ github.ref_name }}' =~ ^v(.*) ]]; then
            VER="${{ github.ref_name }}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "$VER" > kart/VERSION
          echo "value=$VER" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: "app: vendor dependencies"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos

      - name: "check for vcpkg errors"
        if: ${{ failure() || cancelled() }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV

      - name: "app: build"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          buildPreset: ci-macos

      - name: "vendor: save archive"
        uses: actions/upload-artifact@v3
        with:
          name: vendor-macos-${{ runner.arch }}-${{ matrix.python }}
          path: build/vcpkg-vendor/kart-vendor.*.tar.gz

      #
      # App tests & checks
      #

      - name: "test: smoke test"
        run: |
          ./build/kart --version

      - name: "test: unit tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          testPreset: ci-macos

      #
      # Packaging
      #

      - name: "bundle: setup app signing certificate"
        id: keychain
        uses: apple-actions/import-codesign-certs@v1
        env:
          MACOS_CODESIGN_ID: ${{ secrets.MACOS_CODESIGN_ID }}
        if: "${{ env.MACOS_CODESIGN_ID != '' }}"
        with:
          p12-file-base64: ${{ secrets.MACOS_APP_CERT }}
          p12-password: ${{ secrets.MACOS_CERT_PW }}

      - name: "bundle: assemble"
        uses: lukka/run-cmake@v10
        env:
          MACOS_CODESIGN_ID: ${{ secrets.MACOS_CODESIGN_ID }}
        with:
          configurePreset: ci-macos
          buildPreset: ci-bundle-macos

      - name: "bundle: smoke test"
        shell: bash
        run: |
          ./build/pyinstaller/dist/Kart.app/Contents/MacOS/kart --version

      - name: "bundle: e2e tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-macos
          testPreset: ci-e2e-macos

  #
  # Windows via CMake+VCPKG
  #
  Windows-cmake-vcpkg:
    strategy:
      matrix:
        os: [windows-2019]
        python: ["3.10"]
    runs-on: ${{ matrix.os }}
    env:
      PY_VER: ${{ matrix.python }}
      FORCE_COLOR: "YES"
      NINJA_VERSION: "1.10.2"  # workaround for python logging output buffering noise

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    # https://github.community/t/duplicate-checks-on-push-and-pull-request-simultaneous-event/18012/7
    # Skip Windows builds with eg: `[ci only linux]` unless it's master or a release tag.
    if: >
      (
        github.event_name == 'push'
        || github.event.pull_request.head.repo.full_name != github.repository
      ) && (
        startsWith(github.ref, 'refs/tags/v')
        || github.ref == 'refs/heads/master'
        || !(contains(github.event.head_commit.message, '[ci only linux]') || contains(github.event.head_commit.message, '[ci only macos]'))
      )
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Setup

      - name: "setup: cmake"
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: "${{ env.CMAKE_VERSION }}"
          ninjaVersion: "${{ env.NINJA_VERSION }}"

      - name: "setup: python"
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PY_VER }}"
          architecture: x64

      - name: "setup: pip cache"
        uses: actions/cache@v3
        with:
          path: .cache/pip
          key: pip-${{ runner.os }}-cmakevcpkg-${{ hashFiles('requirements.txt', 'requirements/*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-cmakevcpkg-

      - name: "setup: vcpkg"
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg-vendor/vcpkg"
          vcpkgJsonGlob: "**/vcpkg-vendor/vcpkg.json"
          prependedCacheKey: "20221110a"
          appendedCacheKey: "C${{ env.CMAKE_VERSION}}:N${{ env.NINJA_VERSION }}:${{ hashFiles('vcpkg-vendor/vcpkg-overlay-triplets/**', 'vcpkg-vendor/vcpkg-overlay-ports/**', 'vcpkg-vendor/vcpkg-toolchain-setup.cmake') }}"

      #
      # App Build
      #

      - name: "app: version"
        id: version
        shell: bash
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]] && [[ '${{ github.ref_name }}' =~ ^v(.*) ]]; then
            VER="${{ github.ref_name }}"
            IS_RELEASE=1
          else
            VER=$(sed -E "s/(.*)/\1+ci.${{ github.run_number }}.git${GITHUB_SHA::8}/" kart/VERSION)
            IS_RELEASE=0
          fi
          echo "App Version: $VER"
          echo "Is Release? $IS_RELEASE"
          echo "$VER" > kart/VERSION
          echo "value=$VER" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: "app: vendor dependencies"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows

      - name: "check for vcpkg errors"
        if: ${{ failure() || cancelled() }}
        run: |
          echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV

      - name: "app: build"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows
          buildPreset: ci-windows

      - name: "vendor: save archive"
        uses: actions/upload-artifact@v3
        with:
          name: vendor-windows-${{ runner.arch }}-${{ matrix.python }}
          path: build/vcpkg-vendor/kart-vendor.*.zip

      #
      # App tests & checks
      #

      - name: "test: smoke test"
        shell: bash
        run: |
          ./build/kart.cmd --version

      - name: "test: unit tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows
          testPreset: ci-windows

      #
      # Packaging
      #

      - name: "bundle: assemble"
        uses: lukka/run-cmake@v10
        env:
          SIGN_AZURE_CERTIFICATE: ${{ secrets.WIN_SIGN_AZURE_CERTIFICATE }}
          SIGN_AZURE_VAULT: ${{ secrets.WIN_SIGN_AZURE_VAULT }}
          SIGN_AZURE_CLIENTID: ${{ secrets.WIN_SIGN_AZURE_CLIENTID }}
          SIGN_AZURE_CLIENTSECRET: ${{ secrets.WIN_SIGN_AZURE_CLIENTSECRET }}
          SIGN_AZURE_TENANTID: ${{ secrets.WIN_SIGN_AZURE_TENANTID }}
        with:
          configurePreset: ci-windows
          buildPreset: ci-bundle-windows

      - name: "bundle: smoke test"
        shell: bash
        run: |
          ./build/pyinstaller/dist/kart/kart.exe --version

      - name: "bundle: e2e tests"
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ci-windows
          testPreset: ci-e2e-windows
