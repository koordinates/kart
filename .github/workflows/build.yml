---
name: Build

on: [push]

env:
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip

jobs:
  posix:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux
            id: Linux
            os: ubuntu-latest
            package-formats: deb rpm
          - name: macOS
            id: Darwin
            os: macos-latest
            package-formats: pkg
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: 1
      PY3_PKG: python-3.7.6-macosx10.9.pkg
      PY3_URL: https://www.python.org/ftp/python/3.7.6/python-3.7.6-macosx10.9.pkg
      HOMEBREW_CACHE: ${{ github.workspace }}/.cache/brew
    steps:
      - uses: actions/checkout@v2

      #
      # vendor source
      #

      - name: "vendor-source: cache"
        id: cache-vendor
        uses: actions/cache@v1
        with:
          path: .cache/vendor-source
          key: vendor-source-${{ matrix.platform.id }}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/Makefile') }}

      - name: "vendor-source: download"
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: |
          tar xvf .cache/vendor-source/vendor.tar || true
          echo 'verbose = off' >> $HOME/.wgetrc
          make -C vendor sources
          mkdir -p .cache/vendor-source
          tar cvf .cache/vendor-source/vendor.tar vendor/*/*.tar.* vendor/*/*.zip

      #
      # python distribution
      #

      - name: "🍎 python: cache"
        id: cache-pydist
        uses: actions/cache@v1
        if: runner.os == 'macOS'
        with:
          path: .cache/pydist
          key: pydist-${{ matrix.platform.id}}-${{ env.PY3_PKG }}

      - name: "🍎 python: download"
        if: runner.os == 'macOS' && steps.cache-pydist.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/pydist
          wget -nv ${{ env.PY3_URL }} -O .cache/pydist/${{ env.PY3_PKG }}

      - name: "python: pip cache"
        uses: actions/cache@v1
        with:
          path: .cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('Makefile') }}
          restore-keys: |
            pip-${{ runner.os }}-
            pip-

      #
      # vendor build
      #

      # get last time's vendor bundle
      # a hit here leads to skipping the rest of this job

      - name: "vendor-dist: cache"
        id: cache-dist
        uses: actions/cache@v1
        with:
          path: vendor/dist/
          key: vendor-dist-${{ matrix.platform.id}}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}

      - name: "🐧 python"
        uses: actions/setup-python@v1
        if: runner.os != 'macOS'
        with:
          python-version: '3.7'

      - name: "🍎 homebrew cache"
        id: cache-brew
        uses: actions/cache@v1
        if: runner.os == 'macOS'
        with:
          path: .cache/brew
          key: brew

      - name: "🍎 prerequisites"
        if: runner.os == 'macOS'
        run: |
          sudo installer -pkg .cache/pydist/${{ env.PY3_PKG }} -dumplog -target /
          brew install ccache pkg-config sqlite3 pandoc
          brew cask install Packages

      - name: "vendor: ccache"
        uses: actions/cache@v1
        if: steps.cache-dist.outputs.cache-hit != 'true'
        with:
          path: .ccache
          key: vendor-ccache-${{ matrix.platform.id}}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}-${{ github.sha }}
          restore-keys: |
            vendor-ccache-${{ matrix.platform.id }}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}-${{ github.sha }}
            vendor-ccache-${{ matrix.platform.id }}-${{ hashFiles('vendor/**/Makefile') }}-${{ hashFiles('vendor/build-manylinux.sh') }}-
            vendor-ccache-${{ matrix.platform.id }}-

      - name: "vendor: build"
        if: steps.cache-dist.outputs.cache-hit != 'true'
        run: |
          tar xvf .cache/vendor-source/vendor.tar
          echo 'verbose = off' >> $HOME/.wgetrc
          make -C vendor build-${{ matrix.platform.id }}

      - name: "vendor: save library bundle"
        uses: actions/upload-artifact@v2-preview
        with:
          name: vendor-${{ matrix.platform.id }}
          path: vendor/dist/vendor-${{ matrix.platform.id }}.tar.gz

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          PKG_VERSION=$(cat sno/VERSION | sed -E "s/(.*)/\1+ci.${GITHUB_SHA::8}/")
          echo "$PKG_VERSION" | tee sno/VERSION
          echo "::set-output name=value::$PKG_VERSION"

      - name: "app: install python dependencies"
        run: |
          make py-deps

      - name: "app: build"
        run: |
          make release
          venv/bin/sno --version

      #
      # App tests & checks
      #

      - name: "app: install test dependencies"
        run: |
          make py-deps-dev

      - name: "app: license check"
        run: |
          make py-license-check

      - name: "app: check for un-compiled dependencies"
        run: |
          make py-requirements
          git diff requirements.txt requirements/*.txt
          # error for runtime dependencies out of sync
          git diff --exit-code requirements.txt

      - name: "app: unit tests"
        run: |
          make ci-test

      - name: "app: save test coverage"
        uses: actions/upload-artifact@v2-preview
        with:
          name: test-results-${{ matrix.platform.id }}
          path: test-results/

      #
      # Packaging
      #

      - name: "🍎 package: assemble"
        id: package-Darwin
        if: runner.os == 'macOS'
        run: |
          make py-tools
          make -C platforms pkg
          ls -la platforms/macos/dist/Sno-${{ steps.version.outputs.value }}.pkg
          echo "::set-output name=file::platforms/macos/dist/Sno-${{ steps.version.outputs.value }}.pkg"

      - name: "🐧 package: assemble"
        id: package-Linux
        if: runner.os == 'Linux'
        run: |
          make -C platforms deb rpm
          ls -la platforms/linux/dist/*.rpm platforms/linux/dist/*.deb

      # Pre-cache cleanup

      - name: "package: cleanup"
        run: |
          sudo find vendor/dist -mindepth 1 -maxdepth 1 ! -name "vendor-*.tar.gz" -exec rm -rf {} \;

      #
      # Package tests
      #

      - name: "🍎 package: tests"
        if: matrix.platform.id == 'Darwin'
        run: |
          sudo installer -pkg ${{ steps.package-Darwin.outputs.file }} -dumplog -target /
          readlink $(which sno)
          PATH=/usr/local/opt/sqlite3/bin:$PATH tests/scripts/e2e-1.sh

      - name: "🐧 package: tests"
        if: matrix.platform.id == 'Linux'
        run: |
          make -C platforms test-deb-all test-rpm-all

      #
      # Uploading packages
      #

      - name: "🍎 package: save pkg"
        uses: actions/upload-artifact@v2-preview
        if: matrix.platform.id == 'Darwin'
        with:
          name: ${{ matrix.platform.name }}-pkg
          path: ${{ steps.package-Darwin.outputs.file }}

      - name: "🐧 package: save deb"
        uses: actions/upload-artifact@v2-preview
        if: matrix.platform.id == 'Linux'
        with:
          name: ${{ matrix.platform.name }}-deb
          path: platforms/linux/dist/*.deb

      - name: "🐧 package: save rpm"
        uses: actions/upload-artifact@v2-preview
        if: matrix.platform.id == 'Linux'
        with:
          name: ${{ matrix.platform.name }}-rpm
          path: platforms/linux/dist/*.rpm

  windows:
    name: Windows
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2

      #
      # python distribution
      #

      - name: "python"
        run: |
          $PY3=(Get-Command python).Definition
          echo "::set-env name=PY3::$PY3"

      - name: "python: pip cache"
        uses: actions/cache@v1
        with:
          path: .cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('makefile.vc') }}
          restore-keys: |
            pip-${{ runner.os }}-
            pip-

      #
      # vendor build
      #

      # get last time's vendor bundle
      # a hit here leads to skipping the rest of this job

      - name: "vendor-dist: cache"
        id: cache-dist
        uses: actions/cache@v1
        with:
          path: vendor/dist/
          key: vendor-dist-Windows-${{ hashFiles('vendor/makefile.vc') }}

      - name: "vendor: build"
        if: steps.cache-dist.outputs.cache-hit != 'true'
        working-directory: vendor
        run: |
          nmake /D /NoLogo /F makefile.vc

      - name: "vendor: save library bundle"
        uses: actions/upload-artifact@v2-preview
        with:
          name: vendor-Windows
          path: vendor/dist/vendor-Windows.zip

      #
      # App Build
      #

      - name: "app: version"
        id: version
        run: |
          $PKG_VERSION="$(Get-Content .\sno\VERSION)+ci.$($Env:GITHUB_SHA.subString(0,8))"
          echo "$PKG_VERSION"
          echo "$PKG_VERSION" > .\sno\VERSION
          echo "::set-output name=value::$PKG_VERSION"

      - name: "app: install python dependencies"
        run: |
          nmake /D /NoLogo /F makefile.vc venv\.requirements.installed

      - name: "app: build"
        run: |
          nmake /D /NoLogo /F makefile.vc
          venv\Scripts\sno.exe --version

      #
      # App tests & checks
      #

      - name: "app: install test dependencies"
        run: |
          nmake /D /NoLogo /F makefile.vc venv\.test.installed

      - name: "app: unit tests"
        run: |
          nmake /D /NoLogo /F makefile.vc ci-test

      - name: "app: save test coverage"
        uses: actions/upload-artifact@v2-preview
        with:
          name: test-results-Windows
          path: test-results/

      #
      # Packaging
      #

      - name: "package: assemble"
        id: package
        run: |
          nmake /D /NoLogo /F makefile.vc package
          echo "::set-output name=file::platforms/windows/dist/Sno-${{ steps.version.outputs.value }}.msi"

      #
      # Package tests
      #

      - name: "package: tests"
        run: |
          Start-Process msiexec.exe -Wait -ArgumentList '/I ${{github.workspace}}\${{ steps.package.outputs.file }} /quiet /norestart /l* install.log'
          if (Test-Path install.log -PathType leaf) { Get-Content install.log }
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" +[System.Environment]::GetEnvironmentVariable("Path", "User")
          & sno --version
        # tests\scripts\e2e-1.sh

      #
      # Uploading packages
      #

      - name: "package: save"
        uses: actions/upload-artifact@v2-preview
        with:
          name: Windows-msi
          path: ${{ steps.package.outputs.file }}
